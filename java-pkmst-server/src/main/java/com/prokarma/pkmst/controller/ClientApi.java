/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.ClientCard;
import org.threeten.bp.LocalDate;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaPKMSTServerCodegen", date = "2018-08-18T07:07:33.250Z")

@Api(value = "Client", description = "the Client API")
public interface ClientApi {

    @ApiOperation(value = "Add a new Client Card", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "Client_auth", scopes = {
            @AuthorizationScope(scope = "write:ClientCards", description = "modify ClientCards in your account"),
            @AuthorizationScope(scope = "read:ClientCards", description = "read ClientCard")
            })
    }, tags={ "Client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/Client",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addClientCard(@ApiParam(value = "ClientCard that needs to be added" ,required=true )   @RequestBody ClientCard body, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Finds ClientCards by ClientCriteria", notes = "", response = ClientCard.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Client_auth", scopes = {
            @AuthorizationScope(scope = "write:ClientCards", description = "modify ClientCards in your account"),
            @AuthorizationScope(scope = "read:ClientCards", description = "read ClientCard")
            })
    }, tags={ "Client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ClientCard.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ClientCriteria value") })
    @RequestMapping(value = "/Client/findByClientCriteria",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ClientCard>> findClientCardByClientCriteria(@ApiParam(value = "", required = true)  @RequestParam(value = "Name", required = true) String name,@ApiParam(value = "", required = true)  @RequestParam(value = "Surname", required = true) String surname,@ApiParam(value = "")  @RequestParam(value = "ParentName", required = false) String parentName,@ApiParam(value = "", allowableValues = "Passport, Foreign passport, Seaman passport")  @RequestParam(value = "TypeDoc", required = false) String typeDoc,@ApiParam(value = "")  @RequestParam(value = "SeriaDoc", required = false) String seriaDoc,@ApiParam(value = "")  @RequestParam(value = "NumDoc", required = false) String numDoc,@ApiParam(value = "")  @RequestParam(value = "Issuer", required = false) String issuer,@ApiParam(value = "")  @RequestParam(value = "IssueDate", required = false) LocalDate issueDate, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Find ClientCard by ID", notes = "Returns a single ClientCard", response = ClientCard.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "Client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ClientCard.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "ClientCard not found") })
    @RequestMapping(value = "/Client/{ClientCardId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ClientCard> getClientCardById(@ApiParam(value = "ID of ClientCard to return",required=true ) @PathVariable("ClientCardId") Long clientCardId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
